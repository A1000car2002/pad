---
title: "EL VALOR DE LA PROGRAMACIÓN"
author: "Ph. D Amilcar Valle López"
date: "`r Sys.Date()`"
lang: "es"
description: "Una exploración en profundidad sobre el valor de la programación en el desarrollo profesional y académico."
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    embed-resources: true
    smooth-scroll: true
    anchor-sections: true
    output-file: index
    fontsize: 1.1em
    linestretch: 1.7
    css: estilos.css
    highlight-style: tomorrow-night
    code-fold: true
footer: |
    <footer style="text-align: center;">
        © 2024 Amilcar Valle López | Todos los derechos reservados |
        <a href="https://linkedin.com/in/amilcarvalle" target="_blank">LinkedIn</a> |
        <a href="mailto:vallelopezamilcar2002@gmail.com">Contacto</a>
    </footer>
editor_options: 
  chunk_output_type: console
---


# Introducción

Aquí puedes ver una imagen relacionada con el tema:
![Planta de aguaymanto](https://www.r-project.org/Rlogo.png)


![La programación del futuro](prog.jpg)

# ¿Cómo usar Quarto?

## fuentes

-   Negrita: **esto es fuente negrita**
-   Cursiva: *Solanum tuberosum*

## Fórmulas matemáticas

Este es el Área del círculo$$Area_{círculo}=pi\cdot r^2$$ Esta es la fórmula de la ecuaciones cuadráticas $$x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}$$

Esta es una fórmula cualquiera $$\frac{\left(2x-1\right)^2-1}{4}=k$$ Esta es la fórmula del volumen del cilindro $$V_{cilindro}=pi\cdot r^2.h$$

# Para realizar el proyecto debo

1.  Tener mi proyecto
2.  Conectar mi proyecto a GithUb
3.  Tener un archivo en formato html llamado `index.html`
4.  Hacer push al repositorio
5.  Activar Github pages

# Modelos lineales

## Insertar datos

```{r}
source('https://inkaverse.com/setup.r')

url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"

gs <- url %>% 
  as_sheets_id()

fb <- gs %>%
  range_read("fb")

str(fb)
```

## Modelo lineal para lfa

```{r}
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              , data =fb)

anova(modelo)

plot(modelo)
```

### Boxplot

```{r}
ggplot(fb, aes(x = geno, y = lfa, colour = riego)) + 
         geom_boxplot(outlier.colour = "green", outlier.shape = 16, outlier.size = 2) + 
         labs(title = "Boxplot con interacción de niveles de riego y genotipo",
              x = "Interacción riego y genotipo",
              y = "Área foliar (cm^2)")
         theme_minimal() + 
         theme(axis.text.x = element_text(angle = 45,hjust = 1))
```

## Modelo lineal para hi

```{r}
modelo <- aov(formula = hi ~ bloque + riego + geno + riego*geno
              , data =fb)

anova(modelo)

plot(modelo)
```

### Boxplot

```{r}
ggplot(fb, aes(x = geno, y = hi, colour = riego)) + 
         geom_boxplot(outlier.colour = "blue", outlier.shape = 16, outlier.size = 2) + 
         labs(title = "Boxplot con interacción de niveles de riego y genotipo",
              x = "Interacción riego y genotipo",
              y = "Área foliar (cm^2)")
         theme_minimal() + 
         theme(axis.text.x = element_text(angle = 45,hjust = 1))
```

## Modelos lineales mixtos : lfa

```{r}
library(lme4)

model <- lme4::lmer(formula = lfa ~ riego + geno + riego * geno + (1 | bloque), data = fb)

anova(model)

plot(model)

ol <- boxplot(lfa ~ riego * geno, fb)
ol
```

```{r}
library(inti)
model <- remove_outliers(data = fb
                         ,formula = lfa ~ riego + geno + riego * geno+ (1 | bloque)
                         , plot_diag = T
                         ) 
model
```
# Agricolae: Comparación de medias
```{r}
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

anova(modelo)

library(agricolae)

tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

print(tukey_result)

plot(tukey_result)
```
# Prueba de Tukey
```{r}
tukey_result

grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
# Cargar las bibliotecas necesarias
library(agricolae)
library(ggplot2)
library(dplyr)
library(tidyr)

# Ajustar el modelo lineal
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

# Obtener el resultado de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

# Crear un dataframe con los grupos y separar los tratamientos
grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")

# Verificar la estructura del dataframe y los nombres de las columnas
str(grupos)
print(colnames(grupos))  # Verificar nombres de columnas

# Crear el gráfico de barras
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) +  # Asegúrate de que "LFA" sea el nombre correcto
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  labs(title = "Comparación de Medias - Prueba de Tukey", 
       x = "Genotipos", 
       y = "FTL") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
  scale_fill_discrete(name = "Riego")
```
## Gráfico de comparación de medias: Tukey

```{r}
# Crear el gráfico de barras con letras estadísticas
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) +  # Asegúrate de que "lfa" sea el nombre correcto
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  labs(title = "Comparación de Medias - Prueba de Tukey", 
       x = "Genotipos", 
       y = "FTL") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
  scale_fill_discrete(name = "Riego") +
  geom_text(aes(label = groups, y = lfa + 0.05),  # Usar 'groups' en lugar de 'M'
            position = position_dodge(0.9), vjust = 0)  # Ajustar el espaciado de las letras

```
# emmeans: Comparación de medias

```{r}

model <- lme4::lmer(formula = hi ~ riego + geno + riego * geno + (1 | bloque), data = fb)

anova(model)

library(emmeans)
library(multicmp)
library(multcompView)

cm1 <- emmeans(model, ~ geno | riego) %>%
  cld(Letters=letters, reversed = T)
cm1

cm2 <- emmeans(model, ~ riego | geno) %>%
  cld(Letters=letters, reversed = T)
cm2

cm3 <- emmeans(model, ~ riego * geno) %>%
  cld(Letters=letters, reversed = T)
cm3
```
## Gráfico
```{r}
# Convertir las medias estimadas a un dataframe
cm1_df <- as.data.frame(cm1)

# Ver el contenido del dataframe para asegurarnos de que tiene las columnas correctas
print(cm1_df)

# Crear el gráfico de barras con los resultados de las medias estimadas de emmeans
ggplot(cm1_df, aes(x = geno, y = emmean, fill = riego)) +  # Cambia "emmean" por la columna de las medias estimadas
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  labs(title = "Comparación de Medias - Medias Estimadas", 
       x = "Genotipos", 
       y = "hi") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
  scale_fill_discrete(name = "Riego")

```

```{r}
dtcm <- as.data.frame(cm2) %>% 
  rename(sig = ".group")

ggplot(dtcm, aes(x = geno, y = emmean, fill = riego)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  geom_text(aes(label = sig, y = emmean*1*1),
            position = position_dodge(width = 0.9),
            vjust = 0) +
  labs(x = "Genotipo", y = "HI", fill = "Riego") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ggtitle("Gráfico de barras: LFA por genotipo y riego")

```

# Analisis multivariado
```{r}
str(fb)
```

## Correlación
```{r}
library(tidyverse)
library(psych)

fb %>%
  select_if(is.numeric) %>% 
  dplyr::select(!c("block")) %>%
                   pairs.panels(x = .
             , hist.col="red"
             , pch = 21
             , stars = TRUE
             , scale = FALSE
             , lm = TRUE
             )
```
## PCA: Análisis de componentes principales

```{r}
library(FactoMineR)
mv <- fb %>%
  group_by(riego, geno) %>%
  summarise(across(where(is.numeric), ~ mean(., na.rm =TRUE))) %>%
  PCA(scale.unit = T, quali.sup = c(1:4), graph = F)

p1 <- plot(mv
     , choix="ind"
     , habillage=1)

p2 <- plot(mv
     , choix="var")
list(p1, p2) %>%
  plot_grid(plotlist = .,nrow = 1)
```


# Agradecimiento


![](thank.jpg)
